@import './components/variables';
@import './components/mixins';
@import './components/extensions';
$vectors: 'v1''v2''v3''v4''v5';
$gradientChildren: 'g1''g2';
$panels: 'animLeft''animRight';

@supports (display: grid) {
    @mixin vector-anim($vec, $arr, $off, $duration, $fill) {
        .#{$vec} {
            stroke-dasharray: $arr;
            stroke-dashoffset: $off;
            animation: #{$vec} $duration linear forwards,
            $fill 1s $cubic 2s forwards;
        }
    }

    @each $v in $vectors {
        $array: (v1: 1239.525146484375, v2: 1239.525146484375, v3: 1219.640625, v4: 2144.25439453125, v5: 2191.945556640625);
        $dash-a: map-get($array, $v);
        $dash-o: map-get($array, $v);
        $duration: 0;
        $animation: 0;

        @if($v=="v4") {
            $duration: 5s;
        }

        @else {
            $duration: 2s;
        }

        @if($v !="v1"and $v !="v5"and $v !="v4") {
            $animation: fill;
        }

        @include vector-anim($v, $dash-a, $dash-o, $duration, $animation);

        @keyframes #{$v} {
            0% {
                stroke-dashoffset: $dash-o;
                opacity: 1;
            }

            100% {
                stroke-dashoffset: 0;
            }
        }

        @keyframes fill {
            to {
                fill: #f2f2f2;
            }
        }
    }

    @each $child in $gradientChildren {
        $array: (g1: #f2f2f2, g2: #555);
        $colors: map-get($array, $child);

        .#{$child} {
            animation: #{$child} .3s linear forwards 2s;
        }

        @keyframes #{$child} {
            to {
                stop-color: $colors;
            }
        }
    }

    @each $p in $panels {
        $array: (animLeft: -100%, animRight: 100%);
        $percent: map-get($array, $p);

        .#{$p} {
            transform: translate3d($percent, 0, 0);
            transition: transform 2s $cubic;
        }
    }
}

.container {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    grid-template-rows: repeat(4, 1fr);
    height: 100vh;
    overflow: hidden;
}

.panel {
    background-color: $panel-green;
    grid-row: 1 / 5;
    z-index: 10000;
    will-change: transform;

    &.left {
        grid-column: 1 / 3;
    }

    &.right {
        grid-column: 3 / 5;
    }
}

.svgContainer {
    position: relative;
    z-index: 10001;
    grid-column: 2 / 4;
    grid-row: 2;
    opacity: 1;
    /* height: 70%; */
    width: 60%;
    transition: opacity .5s $cubic 1s;
    justify-self: center;
    align-self: center;

    &.fadeOut {
        opacity: 0;
    }

    .canvas {
        display: block;
        width: 100%;
        visibility: hidden;
    }

    .logoSVG {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
    }

    @supports (display: grid) {
        path:nth-child(n + 2) {
            fill: transparent;
        }
    }
}